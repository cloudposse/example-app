#!/usr/bin/env variant
# vim:set ft=yaml

parameters:
- name: config
  default: .color
  description: "Config file that keeps track of the current color"

- name: namespace
  default: "default"
  description: "Kubernetes namespace"

tasks:

  # https://istio.io/docs/tasks/traffic-management/ingress/#determining-the-ingress-ip-and-ports-when-using-an-external-load-balancer
  istio-ingress:
    description: Output the FQHN of the Istio Ingress Gateway
    script: |
      kubectl --namespace istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'

  # https://istio.io/docs/setup/kubernetes/quick-start/
  istio-injection:
    description: Enable Istio Sidecar Injection for a namespace
    script: |
      kubectl label namespace {{ get "namespace" }} istio-injection=enabled --overwrite=true
  
  use-context:
    description: "Configure kube-context"
    script: |
      kubectl config use-context ${KUBE_CONTEXT}

  deps:
    description: "Install alpine dependencies"
    script: |
      ! which apk >/dev/null || apk add --update curl make bash git kubectl@cloudposse helm@cloudposse helmfile@cloudposse
      helm init --client-only

  color:
    description: "Lookup the current color"
    script: |
      config=${CF_VOLUME_PATH:-.}/{{ get "config" }}
      if [ -f ${config} ]; then
        cat ${config}
      else
        echo "blue" | tee ${config}
      fi

  rolling:
    description: "Trigger a standard rolling deployment without istio"

    parameters:
    - name: color
      type: string
      default: "black"
      description: "Selected color to deploy"

    steps:
    - task: deps
    - task: use-context
    - script: |
        export COLOR={{ get "color" }}
        echo "Updating [${KUBE_CONTEXT}] context {{ get "namespace" }} namespace with color=${COLOR}"
        # Deploy the app and update istio virtual service
        helmfile --namespace {{ get "namespace" }} --selector pull-request=true sync

  blue-green:
    description: "Trigger a blue-green deployment"
    parameters:
    - name: color
      type: string
      description: "Selected color to deploy"

    - name: blue
      type: string
      default: green
      description: "Flip blue color to this color"

    - name: green
      type: string
      default: blue
      description: "Flip green color to this color"

    steps:
    - task: deps
    - task: use-context
    - task: istio-injection
    - script: |
        config=${CF_VOLUME_PATH:-.}/{{ get "config" }}
        cur_color={{ get "color" }}
        new_color={{ get "color" | get }}
        echo "Config file is ${config}"
        echo "Updating [${KUBE_CONTEXT}] context {{ get "namespace" }} namespace: $cur_color => $new_color"
        export COLOR=$new_color
        export APP_HOST=${COLOR}.example.${BASE_HOST}
        export RELEASE_NAME=example-${COLOR}
        # Deploy the app and update istio virtual service
        helmfile --namespace {{ get "namespace" }} sync
        echo "$new_color" > ${config}
